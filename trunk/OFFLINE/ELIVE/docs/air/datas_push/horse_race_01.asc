//This function is called as soon as the first client connects or the application is started through any means
application.onAppStart = function()
{	
	//Using SharedObject.get, we obtain a reference to our shared object
	horseData_so = SharedObject.get("horseData");

	//We call a function to setup our race params and reset everything to default
	//This function is unrelated to FCS operations and is specific to our horse race application
	application.resetRace();

	//We setup an interval, to call our moveHorse function every 2 seconds
	horse_change_interval = setInterval(application.moveHorse,2000, this); 
}

application.onAppStop = function() 
{
	//This function is called when the application terminates
	trace("onAppStop Called");
}

application.onConnect = function(clientObj)
{
	//This function is called whenever a client attempts to connect
	
	//We accept this connection.  
	application.acceptConnection(clientObj);
	
	//We are going to allow our client to read anything, but at this point we are preventing write access
	clientObj.readAccess = "/";
	clientObj.writeAccess = "";
}

application.onDisconnect = function (clientObj)
{
	//This function is called when a client disconnects
	trace("*** onDisconnect called.");
}

/* ****************************************************** */

application.resetRace = function()
{
	for ( var i=0; i<5; i++ )
	{
		//we are going to create/set 5 properties in our shared object.
		//named 0,1,2,3,4
		//Each of these properties is going to contain a label, an image, and a position
		horseData_so.setProperty( i, { label:"Horse "+i, image:"horse_"+i+".jpg", position:80 } ); 
	}
}

application.moveHorse = function()
{	
	//This is a very basic function put together in a basic way to illustrate continually changing data
	
	//Race won is a flag indicating a horse passed the finish line
	var race_won = false;
	
	//Finish line is a variable indicating the end of the race.  It corresponds to a pixel position in the flex app
	//In a good application, this would not be hardcoded, but might be in a database or derived from the client
	var finish_line = 549;
	
	//clear our interval and prevent this function from being called again until we are ready
	clearInterval(horse_change_interval);
	
	trace("Moving Horses");

	//We are preventing FCS from sending any updates to the client until we unlock this shared object
	horseData_so.lock();
	
	//We save data into five different properties in our shared object.
	//Each property contains another object with three properties, a label, an image and a position
	//The label and image will stay constant, however, the position will change, incremented by a random number every time
	for ( var i=0; i<5; i++ )
	{
		//We retrieve the property named i [0..4] from our shared object
		var currentObj = horseData_so.getProperty( i );
		
		//we increment only the position by a new random number
		currentObj.position = currentObj.position + Math.floor( Math.random()*25 );
		
		if ( currentObj.position > finish_line )
		{
			//The race was won
			race_won = true;
			break;
	  	}
	
		//We set the property in our shared object with the new information
		horseData_so.setProperty(i, currentObj ); 
  	}
  
//Our horses never quit.  If they win, they just start over
  	if ( race_won )
  		application.resetRace();
	
		//Unlock the shared object, this allows FCS to send the results to the client
		horseData_so.unlock();

		trace("Reset Interval");
	
		//Setup an interval so we can do this all again in 2 seconds.
		horse_change_interval = setInterval(application.moveHorse,2000, this); 
}
