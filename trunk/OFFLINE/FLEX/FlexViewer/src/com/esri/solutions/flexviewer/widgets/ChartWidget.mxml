<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget	xmlns:esri			="http://www.esri.com/2008/ags" 
			xmlns				="com.esri.solutions.flexviewer.*" 
			xmlns:mx			="http://www.adobe.com/2006/mxml" 
			xmlns:mxeffects		="com.adobe.ac.mxeffects.*"
			xmlns:widgets		="com.esri.solutions.flexviewer.widgets.*"
			x					="600" 
			y					="300" 
			widgetConfigLoaded	="init()">
	
	
	<mx:Script>
		<![CDATA[
		
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.Graphic;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.Map;
			import com.esri.ags.symbol.SimpleFillSymbol;
			import com.esri.ags.symbol.SimpleLineSymbol;
			import com.esri.ags.tasks.FeatureSet;
			import com.esri.ags.tasks.Query;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.toolbars.Draw;
			import com.esri.solutions.flexviewer.SiteContainer;		
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder; 
			import mx.rpc.events.ResultEvent;			
			
			//labels
			[Bindable]
			private var descriptionLabel:String;
			
			[Bindable]
			private var rectangleLabel:String;
			
			[Bindable]
			private var polygonLabel:String;
			
			[Bindable]
			private var clearLabel:String;	
			
			private var loadingLabel:String;
				
			private var chartLabel:String;
			
			private var queryLayer:String;
			
			private var queryFields:String;
			
			private var summaryField:String;
			
			private var summaryValue:Number = 0;
			
			private var chartFields:Array = [];
			
			private var chartSeries:Array = [];
			
			private var currentChart:Number = 0;
			
			private var graphicsLayer:GraphicsLayer;
			
			private var lineSym:SimpleLineSymbol = new SimpleLineSymbol("solid", 0xFF0000, 0.8, 2);
			
			private var polySym:SimpleFillSymbol = new SimpleFillSymbol("solid", 0xFF0000, 0.3, lineSym);
			
			[Bindable]
			private var msgVisible:Boolean = false;
						
			private const ICON_URL:String = "com/esri/solutions/flexviewer/assets/images/icons/";			
			
			private function init():void
			{
				graphicsLayer = new GraphicsLayer();
				graphicsLayer.symbol = polySym;
				map.addLayer(graphicsLayer);
				if (configXML)
				{
					//labels
					descriptionLabel = configXML.labels.descriptionlabel || "Use a tool to define an area on the map:";
					rectangleLabel = configXML.labels.rectanglelabel || "Select by Rectangle";
					polygonLabel = configXML.labels.polygonlabel || "Select by Polygon";
					clearLabel = configXML.labels.clearlabel || "Clear";
					loadingLabel = configXML.labels.loadinglabel || "Loading...";
					chartLabel = configXML.labels.chartlabel || "Total for selected area: ";
					
					queryLayer = configXML.layer;
					queryFields = configXML.fields;
					summaryField = configXML.summaryfield;
					
					var chartList:XMLList = configXML..series;
					for (var i:Number = 0; i < chartList.length(); i++)
					{
						chartFields.push(chartList[i]);
					}
					
				}
			}			
		
			private function activateSearchTool(value:String):void
			{
				var status:String;
				switch (value)
				{
					case Draw.EXTENT:
					{
						status = rectangleLabel;
						break;
					}
					
					case Draw.POLYGON:
					{
						status = polygonLabel;
						break;
					}
				}
				setMapAction(value, status, searchDrawEnd);;		
			}			
			
			private function searchDrawEnd(event:DrawEvent):void
			{
				graphicsLayer.clear();
				graphicsLayer.add(event.graphic)
				var geom:Geometry = event.graphic.geometry;
				queryFeatures(geom);
			}			
			
			//query features
			private function queryFeatures(geom:Geometry):void
			{
				chartSeries.length = 0;
				currentChart = 0;
				
				var querySpatialRel:String = "esriSpatialRelIntersects";
				var queryTask:QueryTask = new QueryTask(queryLayer);
				var query:Query = new Query();
				query.geometry = geom;
				query.outFields = queryFields.split(",");
				query.returnGeometry = false;
				query.spatialRelationship = querySpatialRel;
				query.outSpatialReference = map.spatialReference;
				queryTask.execute(query, new AsyncResponder(onResult, onFault));  
				showMessage(loadingLabel, true); 
				      
	          	// on result
				function onResult(featureSet:FeatureSet, token:Object = null):void                
				{   
					try
					{
						calculateStatistics(featureSet); 
					}
					catch (error:Error)
					{
						showMessage(error.message, false);
					}	
			  	}
						
				//on fault
				function onFault(info:Object, token:Object = null) : void
				{                    
					showMessage(info.toString(), false);         
				}  
			}			
		
			//calculate statistics
			private function calculateStatistics(featureSet:FeatureSet):void
			{
				summaryValue = 0;
				
				for (var i:Number = 0; i < chartFields.length; i++)
				{
					var chartFieldArray:Array = chartFields[i].split(",");
					var chartValueArray: Array = [];
					for (var j:Number = 0; j < chartFieldArray.length; j++)
					{
						var label:String = chartFieldArray[j];
						var value: Number = 0;
						for (var r:Number = 0; r < featureSet.features.length; r++)                    
						{
							value += Number(featureSet.attributes[r][label]);
							if (i == 0 && j == 0)
								summaryValue += Number(featureSet.attributes[r][summaryField]);
						}
						var obj:Object = new Object();
						obj.label = label;
						obj.value = value;
						chartValueArray.push(obj);
					}
					chartSeries.push(chartValueArray);
				}
				
				if (chartSeries.length > 0)
	            	chartStatistics.dataProvider  = chartSeries[currentChart];
	            var msg:String = chartLabel + " [" + featureSet.features.length + " features]: " + numFormatter.format(summaryValue);
	            showMessage(msg, false);
			}			
			
			private function chartClick(event:MouseEvent):void
			{
				if (currentChart < chartSeries.length -1)
				{
					currentChart += 1;
				}
				else
				{
					currentChart = 0;
				}
				chartStatistics.dataProvider  = chartSeries[currentChart];
			}			
			
			private function clear():void
			{
				graphicsLayer.clear();
				chartSeries.length = 0;
				currentChart = 0;
				chartStatistics.dataProvider = null;
				clearMessage();
			}			
					
			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text = msg;
				swfMessage.visible = swfVisible;
				msgVisible = true;
			}			
			
			private function clearMessage():void
			{
				msgVisible = false;
			}				
				
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				setMapNavigation(null, null);
			}			
			
			private function widgetOpenedHandler(event:Event):void
			{
				graphicsLayer.visible = true;
			}
							
		]]>
	</mx:Script>
	
	<mx:SeriesSlide id="slideLeft" duration="1000" direction="left"/>
    <mx:SeriesSlide id="slideRight" duration="1000" direction="right"/>
    
    <mx:NumberFormatter		id="numFormatter" 
							useThousandsSeparator="true" 
							precision="0"/>
   
	<WidgetTemplate id="wTemplate" height="320" widgetClosed="widgetClosedHandler(event)" widgetOpened="widgetOpenedHandler(event)">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">
			<mx:VBox width="100%" height="100%" verticalGap="1">
				<mx:Text text="{descriptionLabel}" styleName="WidgetText" width="100%" textAlign="center"/>
				<mx:HBox horizontalAlign="center" width="100%" horizontalGap="15">
					<mx:Image click="{activateSearchTool(Draw.EXTENT)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_rect.png" useHandCursor="true" buttonMode="true" toolTip="{rectangleLabel}" width="40" height="40"/>
					<mx:Image click="{activateSearchTool(Draw.POLYGON)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_poly.png" useHandCursor="true" buttonMode="true" toolTip="{polygonLabel}" width="40" height="40"/>
					<mx:Image click="clear()" source="com/esri/solutions/flexviewer/assets/images/icons/i_clear.png" useHandCursor="true" buttonMode="true" toolTip="{clearLabel}" width="40" height="40"/>
				</mx:HBox>
				<mx:HBox id="boxMessage" width="100%" visible="{msgVisible}" includeInLayout="{msgVisible}" horizontalAlign="center">
					<mx:SWFLoader id="swfMessage" source="com/esri/solutions/flexviewer/assets/flash/loader.swf" visible="false" />
					<mx:Text id="txtMessage" text="" styleName="WidgetText" horizontalCenter="0" width="90%"/>
				</mx:HBox>
				<mx:PieChart id="chartStatistics" height="130%" width="100%" showDataTips="true" click="chartClick(event)">
					<mx:series>
	                    <mx:PieSeries	id="pieSeries" 
	                    				field="value" 
	                    				nameField="label" 
	                    				labelField="label" 
	                    				labelPosition="inside" 
	                    				explodeRadius=".01"
	                    				showDataEffect="slideLeft" 
	                    				hideDataEffect="slideRight" 
	                    				color="#FFFFFF"  
	                    				fontSize="12" 
	                    				fontWeight="bold" 
	                    				alpha="1" 
	                    				fontFamily="Arial"/>
	                	</mx:series>
                </mx:PieChart>
			</mx:VBox>
		</mx:ViewStack>
	</WidgetTemplate>
	
</BaseWidget>
