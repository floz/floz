/*** Written by :* @author Floz* www.floz.fr || www.minuit4.fr*/package fr.minuit4.core.conf{	import flash.events.ProgressEvent;	import fr.minuit4.core.events.BatchEvent;	import fr.minuit4.net.loaders.AbstractLoader;	import fr.minuit4.core.commands.Batch;	import fr.minuit4.net.loaders.types.AssetLoader;	import fr.minuit4.net.loaders.types.DataLoader;	import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.utils.Dictionary;	public class Configuration extends EventDispatcher	{			// - PRIVATE VARIABLES -----------------------------------------------------------				private static var _instance:Configuration;		private static var _allowInstanciation:Boolean;				private static const PROP_REGEXP:RegExp = /\$\{(\w)*\}/;		private static const BEGIN_TOKEN_REGEXP:RegExp = /\$\{/;		private static const END_TOKEN_REGEXP:RegExp = /\}/;		private static const DOUBLE_BAR_REGEXP:RegExp = /\/\//g;				private const XML_TO_LOAD:String = "xmlToLoad";		private const MEDIAS_TO_LOAD:String = "mediasToLoad";				private const _completeEvent:Event = new Event( Event.COMPLETE  );		private const _properties:Dictionary = new Dictionary( false );				private var _xml:XML;		private var _batch:Batch;		private var _commands:Array;				// - PUBLIC VARIABLES ------------------------------------------------------------				// - CONSTRUCTOR -----------------------------------------------------------------				public function Configuration()		{			if( !_allowInstanciation ) throw new Error( "This is a Singleton class, use the getInstance() method instead." );			init();		}				public static function getInstance():Configuration		{			if( !_instance )			{				_allowInstanciation = true; {					_instance = new Configuration;				} _allowInstanciation = false;			}			return _instance;		}				// - EVENTS HANDLERS -------------------------------------------------------------				private function onXMLComplete(event:Event):void		{			var textLoader:DataLoader = event.target as DataLoader;			_xml = XML( textLoader.getItemLoaded() );						textLoader.removeEventListener( Event.COMPLETE, onXMLComplete );			textLoader.dispose();						parseXML();		}				private function onBatchProgress( e:ProgressEvent ):void		{			dispatchEvent( e );		}				private function onCommandComplete( e:BatchEvent ):void		{			var item:Object = _commands.shift( );			var loader:AbstractLoader = e.command as AbstractLoader;			_properties[ item.id.toString() ] = loader.getItemLoaded( );			loader.dispose();		}				private function onBatchComplete( e:Event ):void		{			_batch.removeEventListener( ProgressEvent.PROGRESS, onBatchProgress );			_batch.removeEventListener( Event.COMPLETE, onBatchComplete );			dispatchEvent( _completeEvent );		}		// - PRIVATE METHODS -------------------------------------------------------------				private function init():void		{			_commands = [];		}				private function parseXML():void		{			var list:XMLList = _xml.children().( localName( ) != XML_TO_LOAD && localName( ) != MEDIAS_TO_LOAD );			for each( var propNode:XML in list )				_properties[ propNode.name() ] = propNode;						var xmls:Boolean = lookForXMLToLoad(), medias:Boolean = lookForMediasToLoad();			if( xmls || medias ) 			{				loadAssets();				return;			}						dispatchEvent( _completeEvent );		}				private function resolveString( value:String ):String		{			if( !PROP_REGEXP.test( value ) ) return value;						var propertyName:String;			var result:Object = PROP_REGEXP.exec( value );			while( result )			{				propertyName = result[ 0 ];				propertyName = propertyName.replace( BEGIN_TOKEN_REGEXP, "" ).replace( END_TOKEN_REGEXP, "" );			    if( !isProperty( propertyName ) ) throw new Error( "La propriété '" + propertyName + "' n'existe pas; impossible de résoudre ${" + propertyName + "}" );				value = value.replace( PROP_REGEXP, resolveString( _properties[ propertyName ] ) );								result = PROP_REGEXP.exec( value );			}						return value.replace( DOUBLE_BAR_REGEXP, "/" );		}				private function lookForXMLToLoad():Boolean		{			var list:XMLList = _xml.children().( localName() == XML_TO_LOAD ).descendants().( localName() == "file" );			var n:int = list.length();			if( n == 0 ) return false;						var textLoader:DataLoader;			for( var i:int; i<n; ++i )			{				textLoader = new DataLoader( resolveString( list[ i ] ) );				_commands.push( { id: list[ i ].@id, command: textLoader } );			}						return true;		}				private function lookForMediasToLoad():Boolean		{			var list:XMLList = _xml.children().( localName( ) == MEDIAS_TO_LOAD ).descendants().( localName() == "file" );			var n:int = list.length();			if( n == 0 ) return false;						var id:String;			var movieLoader:AssetLoader;			for( var i:int; i<n; ++i )			{				movieLoader = new AssetLoader( resolveString( list[ i ] ) );				id = list[ i ].@id;				if( !id ) throw new Error( "L'élément file contenant '" + list[ i ] + "' n'a pas d'attribut id." );				_commands.push( { id: id, command: movieLoader } );			}						return true;		}				private function loadAssets():void		{			_batch = new Batch();			var i:int, n:int = _commands.length;			for( ; i<n; ++i )				_batch.addCommand( _commands[ i ].command );						_batch.addEventListener( ProgressEvent.PROGRESS, onBatchProgress, false, 0, true );			_batch.addEventListener( BatchEvent.COMMAND_COMPLETE, onCommandComplete, false, 10, true );			_batch.addEventListener( Event.COMPLETE, onBatchComplete, false, 0, true );			_batch.execute( );		}		// - PUBLIC METHODS --------------------------------------------------------------				/***		 * Lance le chargement du fichier xml de configuration.		 * @param	url	String	L'url du fichier de xml de configuration à charger.		 */		public function loadXML( url:String ):void		{			var textLoader:DataLoader = new DataLoader();			textLoader.addEventListener( Event.COMPLETE, onXMLComplete, false, 0, true );			textLoader.load( url );		}				/**		 * Renvoie la valeur contenu dans la balise <propertyName></propertyName> du XML chargé.		 * @param	propertyName	String	Le nom de la propriété à récupérer.		 * @return	String		 */		public function getString( propertyName:String ):String		{			if( !isProperty( propertyName ) ) throw new Error( "La propriété '" + propertyName + "' n'existe pas." );			return resolveString( propertyName );		}		/**		 * Renvoie la valeur contenu dans la balise <propertyName></propertyName> du XML chargé.		 * @param	propertyName	String	Le nom de la propriété à récupérer.		 * @return	XML		 */		public function getXML( propertyName:String ):XML		{			if( !isProperty( propertyName ) ) throw new Error( "La propriété '" + propertyName + "' n'existe pas." );			if( !_properties[ propertyName ] is XML ) throw new TypeError( "La propriété '" + propertyName + "' n'est pas de type XML." );						return XML( _properties[ propertyName ] );		}				/**		 * Renvoie la valeur contenu dans la balise <propertyName></propertyName> du XML chargé.		 * @param	propertyName	String	Le nom de la propriété à récupérer.		 * @return	DisplayObject		 */		public function getMedia( propertyName:String ):DisplayObject		{			if( !isProperty( propertyName ) ) throw new Error( "La propriété '" + propertyName + "' n'existe pas." );			if( !_properties[ propertyName ] is DisplayObject ) throw new TypeError( "La propriété '" + propertyName + "' n'est pas de type DisplayObject." );						return _properties[ propertyName ];		}				/**		 * Modifie ou ajoute une propriété à l'instance de Configuration.		 * @param	name	String	La propriété à ajouter/modifier.		 * @param	value	*	La valeur à attribuer à la propriété.		 */		public function setProperty( name:String, value:* ):void		{			_properties[ name ] = value;		}						/**		 * Vérifie l'existence d'une propriété.		 * @return	Boolean	Renvoie true si la propriété existe, false dans le cas contraire.		 */		public function isProperty( value:String ):Boolean		{			if( value in _properties ) return true;			return false;		}				// - GETTERS & SETTERS -----------------------------------------------------------		}	}