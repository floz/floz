
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\AuxFunctions.as
package caurina.transitions{/**
* Generic, auxiliary functions	 *	 * @author		Zeh Fernando	 * @version		1.0.0	 * @private
*/
public class AuxFunctions{/**
* Gets the R (xx0000) bits from a number		 *		 * @param		p_num				Number		Color number (ie, 0xffff00)		 * @return							Number		The R value
*/
public static function numberToR (p_num:Number) : Number;/**
* Gets the G (00xx00) bits from a number		 *		 * @param		p_num				Number		Color number (ie, 0xffff00)		 * @return							Number		The G value
*/
public static function numberToG (p_num:Number) : Number;/**
* Gets the B (0000xx) bits from a number		 *		 * @param		p_num				Number		Color number (ie, 0xffff00)		 * @return							Number		The B value
*/
public static function numberToB (p_num:Number) : Number;/**
* Checks whether a string is on an array		 *		 * @param		p_string			String		String to search for		 * @param		p_array				Array		Array to be searched		 * @return							Boolean		Whether the array contains the string or not
*/
public static function isInArray (p_string:String, p_array:Array) : Boolean;/**
* Returns the number of properties an object has		 *		 * @param		p_object			Object		Target object with a number of properties		 * @return							Number		Number of total properties the object has
*/
public static function getObjectLength (p_object:Object) : uint;/**
Takes a variable number of objects as parameters and "adds" their properties, form left to right. If a latter object defines a property as null, it will be removed from the final object    	* @param		args				Object(s)	A variable number of objects    	* @return							Object		An object with the sum of all paremeters added as properties.
*/
public static function concatObjects (...args) : Object;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\Equations.as
package caurina.transitions{public class Equations{/**
* There's no constructor.		 * @private
*/
public function Equations ();/**
* Registers all the equations to the Tweener class, so they can be found by the direct string parameters.		 * This method doesn't actually have to be used - equations can always be referenced by their full function		 * names. But "registering" them make them available as their shorthand string names.
*/
public static function init () : void;/**
* Easing equation function for a simple linear tweening, with no easing.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeNone (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quadratic (t^2) easing in: accelerating from zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInQuad (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quadratic (t^2) easing out: decelerating to zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutQuad (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quadratic (t^2) easing in/out: acceleration until halfway, then deceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutQuad (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quadratic (t^2) easing out/in: deceleration until halfway, then acceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInQuad (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a cubic (t^3) easing in: accelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInCubic (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a cubic (t^3) easing out: decelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutCubic (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a cubic (t^3) easing in/out: acceleration until halfway, then deceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutCubic (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a cubic (t^3) easing out/in: deceleration until halfway, then acceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInCubic (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quartic (t^4) easing in: accelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInQuart (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quartic (t^4) easing out: decelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutQuart (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quartic (t^4) easing in/out: acceleration until halfway, then deceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutQuart (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quartic (t^4) easing out/in: deceleration until halfway, then acceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInQuart (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quintic (t^5) easing in: accelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInQuint (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quintic (t^5) easing out: decelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutQuint (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quintic (t^5) easing in/out: acceleration until halfway, then deceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutQuint (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a quintic (t^5) easing out/in: deceleration until halfway, then acceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInQuint (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a sinusoidal (sin(t)) easing in: accelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInSine (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a sinusoidal (sin(t)) easing out: decelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutSine (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a sinusoidal (sin(t)) easing in/out: acceleration until halfway, then deceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutSine (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a sinusoidal (sin(t)) easing out/in: deceleration until halfway, then acceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInSine (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for an exponential (2^t) easing in: accelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInExpo (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for an exponential (2^t) easing out: decelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutExpo (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for an exponential (2^t) easing in/out: acceleration until halfway, then deceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutExpo (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for an exponential (2^t) easing out/in: deceleration until halfway, then acceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInExpo (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a circular (sqrt(1-t^2)) easing in: accelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInCirc (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a circular (sqrt(1-t^2)) easing out: decelerating from zero velocity. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutCirc (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a circular (sqrt(1-t^2)) easing in/out: acceleration until halfway, then deceleration. 		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutCirc (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a circular (sqrt(1-t^2)) easing out/in: deceleration until halfway, then acceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInCirc (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for an elastic (exponentially decaying sine wave) easing in: accelerating from zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param a		Amplitude.		 * @param p		Period.		 * @return		The correct value.
*/
public static function easeInElastic (t:Number, b:Number, c:Number, d:Number, a:Number = Number.NaN, p:Number = Number.NaN) : Number;/**
* Easing equation function for an elastic (exponentially decaying sine wave) easing out: decelerating from zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param a		Amplitude.		 * @param p		Period.		 * @return		The correct value.
*/
public static function easeOutElastic (t:Number, b:Number, c:Number, d:Number, a:Number = Number.NaN, p:Number = Number.NaN) : Number;/**
* Easing equation function for an elastic (exponentially decaying sine wave) easing in/out: acceleration until halfway, then deceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param a		Amplitude.		 * @param p		Period.		 * @return		The correct value.
*/
public static function easeInOutElastic (t:Number, b:Number, c:Number, d:Number, a:Number = Number.NaN, p:Number = Number.NaN) : Number;/**
* Easing equation function for an elastic (exponentially decaying sine wave) easing out/in: deceleration until halfway, then acceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param a		Amplitude.		 * @param p		Period.		 * @return		The correct value.
*/
public static function easeOutInElastic (t:Number, b:Number, c:Number, d:Number, a:Number = Number.NaN, p:Number = Number.NaN) : Number;/**
* Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in: accelerating from zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).		 * @return		The correct value.
*/
public static function easeInBack (t:Number, b:Number, c:Number, d:Number, s:Number = Number.NaN) : Number;/**
* Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out: decelerating from zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).		 * @return		The correct value.
*/
public static function easeOutBack (t:Number, b:Number, c:Number, d:Number, s:Number = Number.NaN) : Number;/**
* Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in/out: acceleration until halfway, then deceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).		 * @return		The correct value.
*/
public static function easeInOutBack (t:Number, b:Number, c:Number, d:Number, s:Number = Number.NaN) : Number;/**
* Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out/in: deceleration until halfway, then acceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).		 * @return		The correct value.
*/
public static function easeOutInBack (t:Number, b:Number, c:Number, d:Number, s:Number = Number.NaN) : Number;/**
* Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in: accelerating from zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInBounce (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out: decelerating from zero velocity.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutBounce (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in/out: acceleration until halfway, then deceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeInOutBounce (t:Number, b:Number, c:Number, d:Number) : Number;/**
* Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out/in: deceleration until halfway, then acceleration.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @return		The correct value.
*/
public static function easeOutInBounce (t:Number, b:Number, c:Number, d:Number) : Number;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\PropertyInfoObj.as
package caurina.transitions{/**
* PropertyInfoObj	 * An object containing the updating info for a given property (its starting value, and its final value)	 *	 * @author		Zeh Fernando	 * @version		1.0.0	 * @private
*/
public class PropertyInfoObj{public var valueStart : Number;public var valueComplete : Number;public var hasModifier : Boolean;public var modifierFunction : Function;public var modifierParameters : Array;/**
* Initializes the basic PropertyInfoObj.		 * 		 * @param	p_valueStart		Number		Starting value of the tweening (null if not started yet)		 * @param	p_valueComplete		Number		Final (desired) property value
*/
internal function PropertyInfoObj (p_valueStart:Number, p_valueComplete:Number, p_modifierFunction:Function, p_modifierParameters:Array);/**
* Clones this property info and returns the new PropertyInfoObj		 *		 * @param	omitEvents		Boolean			Whether or not events such as onStart (and its parameters) should be omitted		 * @return 					TweenListObj	A copy of this object
*/
public function clone () : PropertyInfoObj;/**
* Returns this object described as a String.		 *		 * @return 					String		The description of this object.
*/
public function toString () : String;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\SpecialPropertiesDefault.as
package caurina.transitions{import flash.filters.BitmapFilter;import flash.filters.BlurFilter;import flash.geom.ColorTransform;import flash.media.SoundTransform;/**
* SpecialPropertiesDefault	 * List of default special properties for the Tweener class	 * The function names are strange/inverted because it makes for easier debugging (alphabetic order). They're only for internal use (on this class) anyways.	 *	 * @author		Zeh Fernando, Nate Chatellier	 * @version		1.0.1	 * @private
*/
public class SpecialPropertiesDefault{/**
* There's no constructor.
*/
public function SpecialPropertiesDefault ();/**
* Registers all the special properties to the Tweener class, so the Tweener knows what to do with them.
*/
public static function init () : void;/**
* Splits the _color parameter into specific color variables		 *		 * @param		p_value				Number		The original _color value		 * @return							Array		An array containing the .name and .value of all new properties
*/
public static function _color_splitter (p_value:*, p_parameters:Array) : Array;/**
* Splits the _colorTransform parameter into specific color variables		 *		 * @param		p_value				Number		The original _colorTransform value		 * @return							Array		An array containing the .name and .value of all new properties
*/
public static function _colorTransform_splitter (p_value:*, p_parameters:Array) : Array;public static function _scale_splitter (p_value:Number, p_parameters:Array) : Array;/**
* Splits the _filter, _blur, etc parameter into specific filter variables		 *		 * @param		p_value				BitmapFilter	A BitmapFilter instance		 * @return							Array			An array containing the .name and .value of all new properties
*/
public static function _filter_splitter (p_value:BitmapFilter, p_parameters:Array) : Array;/**
* Returns the current frame number from the movieclip timeline		 *		 * @param		p_obj				Object		MovieClip object		 * @return							Number		The current frame
*/
public static function frame_get (p_obj:Object) : Number;/**
* Sets the timeline frame		 *		 * @param		p_obj				Object		MovieClip object		 * @param		p_value				Number		New frame number
*/
public static function frame_set (p_obj:Object, p_value:Number) : void;/**
* Returns the current sound volume		 *		 * @param		p_obj				Object		Sound object		 * @return							Number		The current volume
*/
public static function _sound_volume_get (p_obj:Object) : Number;/**
* Sets the sound volume		 *		 * @param		p_obj				Object		Sound object		 * @param		p_value				Number		New volume
*/
public static function _sound_volume_set (p_obj:Object, p_value:Number) : void;/**
* Returns the current sound pan		 *		 * @param		p_obj				Object		Sound object		 * @return							Number		The current pan
*/
public static function _sound_pan_get (p_obj:Object) : Number;/**
* Sets the sound volume		 *		 * @param		p_obj				Object		Sound object		 * @param		p_value				Number		New pan
*/
public static function _sound_pan_set (p_obj:Object, p_value:Number) : void;/**
* _color_*		 * Generic function for the ra/rb/ga/gb/ba/bb/aa/ab components of the colorTransform object
*/
public static function _color_property_get (p_obj:Object, p_parameters:Array) : Number;public static function _color_property_set (p_obj:Object, p_value:Number, p_parameters:Array) : void;/**
* Returns the current alpha		 *		 * @param		p_obj				Object		MovieClip or Textfield object		 * @return							Number		The current alpha
*/
public static function _autoAlpha_get (p_obj:Object) : Number;/**
* Sets the current autoAlpha		 *		 * @param		p_obj				Object		MovieClip or Textfield object		 * @param		p_value				Number		New alpha
*/
public static function _autoAlpha_set (p_obj:Object, p_value:Number) : void;/**
* (filters)		 * Generic function for the properties of filter objects
*/
public static function _filter_property_get (p_obj:Object, p_parameters:Array) : Number;public static function _filter_property_set (p_obj:Object, p_value:Number, p_parameters:Array) : void;/**
* Given the parameter object passed to this special property, return an array listing the properties that should be modified, and their parameters		 *		 * @param		p_obj				Object		Parameter passed to this property		 * @return							Array		Array listing name and parameter of each property
*/
public static function _bezier_modifier (p_obj:*) : Array;/**
* Given tweening specifications (beging, end, t), applies the property parameter to it, returning new t		 *		 * @param		b					Number		Beginning value of the property		 * @param		e					Number		Ending (desired) value of the property		 * @param		t					Number		Current t of this tweening (0-1), after applying the easing equation		 * @param		p					Array		Array of parameters passed to this specific property		 * @return							Number		New t, with the p parameters applied to it
*/
public static function _bezier_get (b:Number, e:Number, t:Number, p:Array) : Number;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\SpecialProperty.as
package caurina.transitions{/**
* SpecialProperty	 * A kind of a getter/setter for special properties	 *	 * @author		Zeh Fernando	 * @version		1.0.0	 * @private
*/
public class SpecialProperty{public var getValue : Function;public var setValue : Function;public var parameters : Array;/**
* Builds a new special property object.		 * 		 * @param		p_getFunction		Function	Reference to the function used to get the special property value		 * @param		p_setFunction		Function	Reference to the function used to set the special property value
*/
public function SpecialProperty (p_getFunction:Function, p_setFunction:Function, p_parameters:Array = null);/**
* Converts the instance to a string that can be used when trace()ing the object
*/
public function toString () : String;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\SpecialPropertyModifier.as
package caurina.transitions{/**
* SpecialPropertyModifier	 * A special property which actually acts on other properties	 *	 * @author		Zeh Fernando	 * @version		1.0.0	 * @private
*/
public class SpecialPropertyModifier{public var modifyValues : Function;public var getValue : Function;/**
* Builds a new special property modifier object.		 * 		 * @param		p_modifyFunction		Function		Function that returns the modifider parameters.
*/
public function SpecialPropertyModifier (p_modifyFunction:Function, p_getFunction:Function);/**
* Converts the instance to a string that can be used when trace()ing the object
*/
public function toString () : String;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\SpecialPropertySplitter.as
package caurina.transitions{/**
* SpecialPropertySplitter	 * A proxy setter for special properties	 *	 * @author		Zeh Fernando	 * @version		1.0.0	 * @private
*/
public class SpecialPropertySplitter{public var parameters : Array;public var splitValues : Function;/**
* Builds a new group special property object.		 *		 * @param		p_splitFunction		Function	Reference to the function used to split a value
*/
public function SpecialPropertySplitter (p_splitFunction:Function, p_parameters:Array);/**
* Converts the instance to a string that can be used when trace()ing the object
*/
public function toString () : String;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\Tweener.as
package caurina.transitions{import flash.display.*;import flash.events.Event;import flash.utils.getTimer;public class Tweener{private static var __tweener_controller__ : MovieClip;private static var _engineExists : Boolean;private static var _inited : Boolean;private static var _currentTime : Number;private static var _tweenList : Array;private static var _timeScale : Number;private static var _transitionList : Object;private static var _specialPropertyList : Object;private static var _specialPropertyModifierList : Object;private static var _specialPropertySplitterList : Object;/**
* There's no constructor.		 * @private
*/
public function Tweener ();/**
* Adds a new tweening.		 *		 * @param		(first-n param)		Object				Object that should be tweened: a movieclip, textfield, etc.. OR an array of objects		 * @param		(last param)		Object				Object containing the specified parameters in any order, as well as the properties that should be tweened and their values		 * @param		.time				Number				Time in seconds or frames for the tweening to take (defaults 2)		 * @param		.delay				Number				Delay time (defaults 0)		 * @param		.useFrames			Boolean				Whether to use frames instead of seconds for time control (defaults false)		 * @param		.transition			String/Function		Type of transition equation... (defaults to "easeoutexpo")		 * @param		.onStart			Function			* Direct property, See the TweenListObj class		 * @param		.onUpdate			Function			* Direct property, See the TweenListObj class		 * @param		.onComplete			Function			* Direct property, See the TweenListObj class		 * @param		.onOverwrite		Function			* Direct property, See the TweenListObj class		 * @param		.onStartParams		Array				* Direct property, See the TweenListObj class		 * @param		.onUpdateParams		Array				* Direct property, See the TweenListObj class		 * @param		.onCompleteParams	Array				* Direct property, See the TweenListObj class		 * @param		.onOverwriteParams	Array				* Direct property, See the TweenListObj class		 * @param		.rounded			Boolean				* Direct property, See the TweenListObj class		 * @param		.skipUpdates		Number				* Direct property, See the TweenListObj class		 * @return							Boolean				TRUE if the tween was successfully added, FALSE if otherwise
*/
public static function addTween (p_arg1:Object = null, p_arg2:Object = null) : Boolean;/**
* Adds a new caller tweening.		 *		 * @param		(first-n param)		Object that should be tweened: a movieclip, textfield, etc.. OR an array of objects		 * @param		(last param)		Object containing the specified parameters in any order, as well as the properties that should be tweened and their values		 * @param		.time				Number				Time in seconds or frames for the tweening to take (defaults 2)		 * @param		.delay				Number				Delay time (defaults 0)		 * @param		.count				Number				Number of times this caller should be called		 * @param		.transition			String/Function		Type of transition equation... (defaults to "easeoutexpo")		 * @param		.onStart			Function			Event called when tween starts		 * @param		.onUpdate			Function			Event called when tween updates		 * @param		.onComplete			Function			Event called when tween ends		 * @param		.waitFrames			Boolean				Whether to wait (or not) one frame for each call		 * @return							<code>true</code> if the tween was successfully added, <code>false</code> if otherwise.
*/
public static function addCaller (p_arg1:Object = null, p_arg2:Object = null) : Boolean;/**
* Remove an specified tweening of a specified object the tweening list, if it conflicts with the given time.		 *		 * @param		p_scope				Object						List of objects affected		 * @param		p_properties		Object 						List of properties affected (PropertyInfoObj instances)		 * @param		p_timeStart			Number						Time when the new tween starts		 * @param		p_timeComplete		Number						Time when the new tween ends		 * @return							Boolean						Whether or not it actually deleted something
*/
public static function removeTweensByTime (p_scope:Object, p_properties:Object, p_timeStart:Number, p_timeComplete:Number) : Boolean;/**
* Remove tweenings from a given object from the tweening list.		 *		 * @param		p_tween				Object		Object that must have its tweens removed		 * @param		(2nd-last params)	Object		Property(ies) that must be removed		 * @return							Boolean		Whether or not it successfully removed this tweening
*/
public static function removeTweens (p_scope:Object, ...args) : Boolean;/**
* Remove all tweenings from the engine.		 *		 * @return					<code>true</code> if it successfully removed any tweening, <code>false</code> if otherwise.
*/
public static function removeAllTweens () : Boolean;/**
* Pause tweenings for a given object.		 *		 * @param		p_scope				Object that must have its tweens paused		 * @param		(2nd-last params)	Property(ies) that must be paused		 * @return					<code>true</code> if it successfully paused any tweening, <code>false</code> if otherwise.
*/
public static function pauseTweens (p_scope:Object, ...args) : Boolean;/**
* Pause all tweenings on the engine.		 *		 * @return					<code>true</code> if it successfully paused any tweening, <code>false</code> if otherwise.		 * @see #resumeAllTweens()
*/
public static function pauseAllTweens () : Boolean;/**
* Resume tweenings from a given object.		 *		 * @param		p_scope				Object		Object that must have its tweens resumed		 * @param		(2nd-last params)	Object		Property(ies) that must be resumed		 * @return							Boolean		Whether or not it successfully resumed something
*/
public static function resumeTweens (p_scope:Object, ...args) : Boolean;/**
* Resume all tweenings on the engine.		 *		 * @return <code>true</code> if it successfully resumed any tweening, <code>false</code> if otherwise.		 * @see #pauseAllTweens()
*/
public static function resumeAllTweens () : Boolean;/**
* Do some generic action on specific tweenings (pause, resume, remove, more?)		 *		 * @param		p_function			Function	Function to run on the tweenings that match		 * @param		p_scope				Object		Object that must have its tweens affected by the function		 * @param		p_properties		Array		Array of strings that must be affected		 * @return							Boolean		Whether or not it successfully affected something
*/
private static function affectTweens (p_affectFunction:Function, p_scope:Object, p_properties:Array) : Boolean;/**
* Splits a tweening in two		 *		 * @param		p_tween				Number		Object that must have its tweens split		 * @param		p_properties		Array		Array of strings containing the list of properties that must be separated		 * @return							Number		The index number of the new tween
*/
public static function splitTweens (p_tween:Number, p_properties:Array) : uint;/**
* Updates all existing tweenings.		 *		 * @return							Boolean		FALSE if no update was made because there's no tweening (even delayed ones)
*/
private static function updateTweens () : Boolean;/**
* Remove a specific tweening from the tweening list.		 *		 * @param		p_tween				Number		Index of the tween to be removed on the tweenings list		 * @return							Boolean		Whether or not it successfully removed this tweening
*/
public static function removeTweenByIndex (i:Number, p_finalRemoval:Boolean = false) : Boolean;/**
* Pauses a specific tween.		 *		 * @param		p_tween				Number		Index of the tween to be paused		 * @return							Boolean		Whether or not it successfully paused this tweening
*/
public static function pauseTweenByIndex (p_tween:Number) : Boolean;/**
* Resumes a specific tween.		 *		 * @param		p_tween				Number		Index of the tween to be resumed		 * @return							Boolean		Whether or not it successfully resumed this tweening
*/
public static function resumeTweenByIndex (p_tween:Number) : Boolean;/**
* Updates a specific tween.		 *		 * @param		i					Number		Index (from the tween list) of the tween that should be updated		 * @return							Boolean		FALSE if it's already finished and should be deleted, TRUE if otherwise
*/
private static function updateTweenByIndex (i:Number) : Boolean;/**
* Initiates the Tweener--should only be ran once.
*/
public static function init (p_object:* = null) : void;/**
* Adds a new function to the available transition list "shortcuts".		 *		 * @param		p_name				String		Shorthand transition name		 * @param		p_function			Function	The proper equation function
*/
public static function registerTransition (p_name:String, p_function:Function) : void;/**
* Adds a new special property to the available special property list.		 *		 * @param		p_name				Name of the "special" property.		 * @param		p_getFunction		Function that gets the value.		 * @param		p_setFunction		Function that sets the value.
*/
public static function registerSpecialProperty (p_name:String, p_getFunction:Function, p_setFunction:Function, p_parameters:Array = null) : void;/**
* Adds a new special property modifier to the available modifier list.		 *		 * @param		p_name				Name of the "special" property modifier.		 * @param		p_modifyFunction	Function that modifies the value.		 * @param		p_getFunction		Function that gets the value.
*/
public static function registerSpecialPropertyModifier (p_name:String, p_modifyFunction:Function, p_getFunction:Function) : void;/**
* Adds a new special property splitter to the available splitter list.		 *		 * @param		p_name				Name of the "special" property splitter.		 * @param		p_splitFunction		Function that splits the value.
*/
public static function registerSpecialPropertySplitter (p_name:String, p_splitFunction:Function, p_parameters:Array = null) : void;/**
* Starts the Tweener class engine. It is supposed to be running every time a tween exists.
*/
private static function startEngine () : void;/**
* Stops the Tweener class engine.
*/
private static function stopEngine () : void;/**
* Gets a property value from an object.		 *		 * @param		p_obj				Object		Any given object		 * @param		p_prop				String		The property name		 * @return							Number		The value
*/
private static function getPropertyValue (p_obj:Object, p_prop:String) : Number;/**
* Sets the value of an object property.		 *		 * @param		p_obj				Object		Any given object		 * @param		p_prop				String		The property name		 * @param		p_value				Number		The new value
*/
private static function setPropertyValue (p_obj:Object, p_prop:String, p_value:Number) : void;/**
* Updates the time to enforce time grid-based updates.
*/
public static function updateTime () : void;/**
* Ran once every frame. It's the main engine; updates all existing tweenings.
*/
public static function onEnterFrame (e:Event) : void;/**
* Sets the new time scale.		 *		 * @param		p_time				Number		New time scale (0.5 = slow, 1 = normal, 2 = 2x fast forward, etc)
*/
public static function setTimeScale (p_time:Number) : void;/**
* Finds whether or not an object has any tweening.		 *		 * @param		p_scope		Target object.		 * @return					<code>true</code> if there's a tweening occuring on this object (paused, delayed, or active), <code>false</code> if otherwise.
*/
public static function isTweening (p_scope:Object) : Boolean;/**
* Returns an array containing a list of the properties being tweened for this object.		 *		 * @param		p_scope		Target object.		 * @return					Total number of properties being tweened (including delayed or paused tweens).
*/
public static function getTweens (p_scope:Object) : Array;/**
* Returns the number of properties being tweened for a given object.		 *		 * @param		p_scope		Target object.		 * @return					Total number of properties being tweened (including delayed or paused tweens).
*/
public static function getTweenCount (p_scope:Object) : Number;/**
Handles errors when Tweener executes any callbacks (onStart, onUpdate, etc)        *  If the TweenListObj specifies an <code>onError</code> callback it well get called, passing the <code>Error</code> object and the current scope as parameters. If no <code>onError</code> callback is specified, it will trace a stackTrace.
*/
private static function handleError (pTweening:TweenListObj, pError:Error, pCallBackName:String) : void;/**
* Returns the current tweener version.		 * @return					The identification string of the current Tweener version, composed of an identification of the platform version ("AS2", "AS2_FL7", or "AS3") followed by space and then the version number.		 * @example The following code returns the current used version of Tweener:		 * <listing version="3.0">		 * import caurina.transitions.Tweener;		 *		 * var tVersion:String = Tweener.getVersion();		 * trace ("Using Tweener version " + tVersion + "."); // Outputs: "Using Tweener version AS3 1.24.47."</listing>
*/
public static function getVersion () : String;/**
* Lists all existing tweenings.		 *		 * @return					A string containing the list of all tweenings that currently exist inside the engine.
*/
public static function debug_getList () : String;}}
#file-cache D:\Floz\Flash\Floz\Classes\as3\caurina\transitions\TweenListObj.as
package caurina.transitions{import caurina.transitions.AuxFunctions;/**
* The tween list object. Stores all of the properties and information that pertain to individual tweens.	 *	 * @author		Nate Chatellier, Zeh Fernando	 * @version		1.0.4	 * @private
*/
public class TweenListObj{public var scope : Object;public var properties : Object;public var auxProperties : Object;public var timeStart : Number;public var timeComplete : Number;public var useFrames : Boolean;public var transition : Function;public var onStart : Function;public var onUpdate : Function;public var onComplete : Function;public var onOverwrite : Function;public var onError : Function;public var onStartParams : Array;public var onUpdateParams : Array;public var onCompleteParams : Array;public var onOverwriteParams : Array;public var rounded : Boolean;public var isPaused : Boolean;public var timePaused : Number;public var isCaller : Boolean;public var count : Number;public var timesCalled : Number;public var waitFrames : Boolean;public var skipUpdates : Number;public var updatesSkipped : Number;public var hasStarted : Boolean;/**
* Initializes the basic TweenListObj.		 * 		 * @param	p_scope				Object		Object affected by this tweening		 * @param	p_timeStart			Number		Time when this tweening should start		 * @param	p_timeComplete		Number		Time when this tweening should end		 * @param	p_useFrames			Boolean		Whether or not to use frames instead of time		 * @param	p_transition		Function	Equation to control the transition animation
*/
internal function TweenListObj (p_scope:Object, p_timeStart:Number, p_timeComplete:Number, p_useFrames:Boolean, p_transition:Function);/**
* Clones this tweening and returns the new TweenListObj		 *		 * @param	omitEvents		Boolean			Whether or not events such as onStart (and its parameters) should be omitted		 * @return					TweenListObj	A copy of this object
*/
public function clone (omitEvents:Boolean) : TweenListObj;/**
* Returns this object described as a String.		 *		 * @return					String		The description of this object.
*/
public function toString () : String;/**
* Checks if p_obj "inherits" properties from other objects, as set by the "base" property. Will create a new object, leaving others intact.		 * o_bj.base can be an object or an array of objects. Properties are collected from the first to the last element of the "base" filed, with higher		 * indexes overwritting smaller ones. Does not modify any of the passed objects, but makes a shallow copy of all properties.		 *		 * @param		p_obj		Object				Object that should be tweened: a movieclip, textfield, etc.. OR an array of objects		 * @return					Object				A new object with all properties from the p_obj and p_obj.base.
*/
public static function makePropertiesChain (p_obj:Object) : Object;}}