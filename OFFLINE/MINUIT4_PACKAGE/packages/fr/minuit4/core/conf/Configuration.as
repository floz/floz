/*** Written by :* @author Floz* www.floz.fr || www.minuit4.fr*/package fr.minuit4.core.conf{	import flash.display.DisplayObject;	import fr.minuit4.core.commands.Batch;	import fr.minuit4.core.datas.File;	import fr.minuit4.core.datas.dynamics.DynamicDatas;	import fr.minuit4.core.datas.dynamics.DynamicFormats;	import fr.minuit4.core.datas.dynamics.DynamicJSON;	import fr.minuit4.core.datas.dynamics.DynamicXML;	import fr.minuit4.core.datas.dynamics.IDynamic;	import fr.minuit4.core.events.BatchEvent;	import fr.minuit4.net.loaders.AbstractLoader;	import fr.minuit4.net.loaders.types.AssetLoader;	import fr.minuit4.net.loaders.types.DataLoader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	public class Configuration extends EventDispatcher implements IDynamic	{			// - PRIVATE VARIABLES -----------------------------------------------------------				private static var _instance:Configuration;		private static var _allowInstanciation:Boolean;				private const _completeEvent:Event = new Event( Event.COMPLETE );				private const _propertiesToCheck:Array = [ "baseURL", "pathIMG", "pathXML", "pathSWF", "pathCSS" ];		private const DATAS_TO_LOAD:String = "datasToLoad";		private const ASSETS_TO_LOAD:String = "assetsToLoad";				private var _commands:Array;		private var _filesLoaded:Object;				private var _dynamicDatas:DynamicDatas;		private var _format:String;				private var _batch:Batch;		private var _ready:Boolean = false;				// - PUBLIC VARIABLES ------------------------------------------------------------				public static var baseURL:String = ".";		public static var pathIMG:String = baseURL + "/img";		public static var pathXML:String = baseURL + "/xml";		public static var pathJSON:String = baseURL + "/json";		public static var pathSWF:String = baseURL + "/swf";		public static var pathCSS:String = baseURL + "/css";		// - CONSTRUCTOR -----------------------------------------------------------------				public function Configuration()		{			if( !_allowInstanciation ) throw new Error( "This is a Singleton class, use the getInstance() method instead." );			init();		}				// - EVENTS HANDLERS -------------------------------------------------------------				private function onLoadComplete( e:Event ):void		{			var dataLoader:DataLoader = e.target as DataLoader;			dataLoader.removeEventListener( Event.COMPLETE, onLoadComplete );						var datas:String = dataLoader.getItemLoaded();			switch( _format )			{				case DynamicFormats.XML : _dynamicDatas = new DynamicXML( XML( datas ) ); break;				case DynamicFormats.JSON : _dynamicDatas = new DynamicJSON( Object( datas ) ); break; 			}										dataLoader.dispose();						parseDatas();		}				private function onBatchProgress( e:ProgressEvent ):void		{			dispatchEvent( e );		}				private function onCommandComplete( e:BatchEvent ):void		{			var file:File = _commands.shift();			var loader:AbstractLoader = e.command as AbstractLoader;			_filesLoaded[ file.id ] = loader.getItemLoaded();			loader.dispose();		}				private function onBatchComplete( e:Event ):void		{			_batch.removeEventListener( ProgressEvent.PROGRESS, onBatchProgress );			_batch.removeEventListener( Event.COMPLETE, onBatchComplete );			dispatchEvent( _completeEvent );		}				// - PRIVATE METHODS -------------------------------------------------------------				private function init():void		{			_commands = [];		}				protected function parseDatas():void		{			var propertyName:String;			var i:int = _propertiesToCheck.length;			while( --i > -1 )			{				propertyName = _propertiesToCheck[ i ]; 				if( _dynamicDatas.hasProperty( propertyName ) )					Configuration[ propertyName ] = _dynamicDatas.getProperty( propertyName );			}						var datas:Boolean = registerDatasToLoad(), assets:Boolean = registerAssetsToLoad();			if( datas || assets )			{				loadFiles();				return;			}			dispatchEvent( _completeEvent );		}				private function registerDatasToLoad():Boolean		{			if( !_dynamicDatas.hasProperty( DATAS_TO_LOAD) ) return false;			var datasToLoad:/*File*/Array = _dynamicDatas.getFiles( DATAS_TO_LOAD );						var file:File;			var dataLoader:DataLoader;			var i:int, n:int = datasToLoad.length;			for( ; i<n; ++i )			{				file = datasToLoad[ i ];				dataLoader = new DataLoader( file.url );				file.command = dataLoader;				_commands.push( file );			}									return true;		}		private function registerAssetsToLoad():Boolean		{			if( !_dynamicDatas.hasProperty( DATAS_TO_LOAD) ) return false;			var assetsToLoad:/*File*/Array = _dynamicDatas.getFiles( ASSETS_TO_LOAD );						var file:File;			var assetLoader:AssetLoader;			var i:int, n:int = assetsToLoad.length;			for( ; i<n; ++i )			{				file = assetsToLoad[ i ];				assetLoader = new AssetLoader( file.url );				file.command = assetLoader;				_commands.push( file );			}									return true;		}				private function loadFiles():void		{			if( _ready ) return;			_ready = true;						_filesLoaded = {};						_batch = new Batch();			var i:int, n:int = _commands.length;			for( ; i<n; ++i )				_batch.addCommand( _commands[ i ].command );						_batch.addEventListener( ProgressEvent.PROGRESS, onBatchProgress, false, 0, true );			_batch.addEventListener( BatchEvent.COMMAND_COMPLETE, onCommandComplete, false, 10, true );			_batch.addEventListener( Event.COMPLETE, onBatchComplete, false, 0, true );			_batch.execute();		}		// - PUBLIC METHODS --------------------------------------------------------------				/**		 * This method has to be called to instanciate the Configuration Object.		 */		public static function getInstance():Configuration		{			if( !_instance )			{				_allowInstanciation = true; {					_instance = new Configuration;				} _allowInstanciation = false;			}			return _instance;		}				/**		 * Launch the loading of the xml file which will be used for the Configuration instance.		 * @param	url	String	The url of the xml file.		 */		public function load( url:String ):void		{			_format = url.substr( url.search( /\./ ), url.length );			if( !DynamicFormats.isFormatAllowed( _format ) ) throw new Error( "Format de donnÃ©es non attendu : '" + _format + "'." );						var dataLoader:DataLoader = new DataLoader();			dataLoader.addEventListener( Event.COMPLETE, onLoadComplete );			dataLoader.load( url );		}				/**		 * @return	Boolean	Return true if the property exist.		 */		public function hasProperty( propertyName:String ):Boolean		{			return _dynamicDatas.hasProperty( propertyName ) || propertyName in _filesLoaded;		}				/**		 * Call this method to add a property at the instance of Configuration.		 * This method can also be used to modify the value of a property.		 * @param	propertyName	String	The name of the property to add or modify.		 * @param	propertyValue	*	The value of the property.		 */		public function setProperty( propertyName:String, propertyValue:* ):void		{			if( propertyName in _filesLoaded || propertyValue is DisplayObject ) _filesLoaded[ propertyName ] = propertyValue;			_dynamicDatas.setProperty( propertyName, propertyValue );		}				/**		 * Return the value of the property.		 * @param	propertyName	String	The name of the property.		 */		public function getProperty( propertyName:String ):*		{			if( propertyName in _filesLoaded ) return _filesLoaded[ propertyName ];			return _dynamicDatas.getProperty( propertyName );		}				// - GETTERS & SETTERS -----------------------------------------------------------		}	}