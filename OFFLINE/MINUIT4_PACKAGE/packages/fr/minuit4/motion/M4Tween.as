/*** Written by :* @author Floz* www.floz.fr || www.minuit4.fr*/package fr.minuit4.motion{	import fr.minuit4.motion.easing.Linear;	import flash.display.Shape;	import flash.events.Event;	import flash.utils.Dictionary;	import flash.utils.getTimer;	public class M4Tween	{		// ------------------------------------------------------------------------ ENGINE				// - PRIVATE VARIABLES -----------------------------------------------------------				private static var _renderer:Shape = startEngine();		private static var _tweens:M4Tween;				private static var _runningTweens:Dictionary = new Dictionary( false );				// - PUBLIC VARIABLES ------------------------------------------------------------				// - EVENTS HANDLERS -------------------------------------------------------------				private static function renderTweens( e:Event ):void		{			if( _tweens ) updateTweens( getTimer() );		}				// - PRIVATE METHODS -------------------------------------------------------------				private static function startEngine():Shape		{			var renderer:Shape = new Shape();			renderer.addEventListener( Event.ENTER_FRAME, renderTweens );			return renderer;		}				private static function updateTweens( time:int ):void		{			var isComplete:Boolean;			var property:TweenProperty;			var factor:Number, currentTweenTime:Number;			var t:M4Tween, tween:M4Tween = _tweens;			while( tween )			{				if( time < tween._startTime )				{					tween = tween._next;					 continue;				}								isComplete = time > tween._endTime;				currentTweenTime = time - tween._startTime;				factor = !isComplete ? tween._ease( currentTweenTime, 0, 1, tween._duration ) : 1;								property = tween._properties;				while( property )				{					tween._target[ property.name ] = property.startValue + ( factor * property.delta );					property = property.next;				}								if ( tween._updateHandler != null )					tween._updateHandler.apply( null, tween._updateArgs );								if( isComplete )				{									if ( tween._completeHandler != null )						tween._completeHandler.apply( null, tween._completeArgs );											t = tween._next;					unregisterTween( tween );					tween.dispose();					tween = t;				}				else tween = tween._next;			}		}				private static function registerTween( tween:M4Tween ):void		{			if( _tweens ) _tweens._prev = tween;			tween._next = _tweens;			_tweens = tween;						var existingTween:M4Tween = _runningTweens[ tween._target ];			if( existingTween )			{				unregisterTween( existingTween );				existingTween.dispose();				delete( _runningTweens[ tween._target ] );			}						_runningTweens[ tween._target ] = tween;		}		private static function unregisterTween( tween:M4Tween ):void		{			var prev:M4Tween = tween._prev;			var next:M4Tween = tween._next;			if( prev ) 			{				prev._next = next;				if( next ) next._prev = prev;			}			else 			{				_tweens = next;				if( _tweens ) _tweens._prev = null;			}						if ( _runningTweens[ tween._target ] )				delete _runningTweens[ tween._target ];		}		// - PUBLIC METHODS --------------------------------------------------------------				public static function to( target:Object, duration:Number, params:Object = null, delay:Number = 0 ):M4Tween		{			return new M4Tween( target, duration, params, delay ).start();		}				public static function killTweensOf( target:Object ):void		{			var tween:M4Tween = _runningTweens[ target ];			tween.dispose();			delete _runningTweens[ target ];		}		public static function killAllTweens():void		{			for( var target:Object in _runningTweens )				killTweensOf( target );		}						// ---------------------------------------------------------------------- INSTANCE				// - PRIVATE VARIABLES -----------------------------------------------------------				private var _target:Object;		private var _duration:Number;		private var _delay:Number;		private var _ease:Function;		private var _properties:TweenProperty;				private var _startTime:int;		private var _endTime:int;				private var _prev:M4Tween;		private var _next:M4Tween;				private var _startHandler:Function;		private var _startArgs:Array;		private var _updateHandler:Function;		private var _updateArgs:Array;		private var _completeHandler:Function;		private var _completeArgs:Array;				// - PUBLIC VARIABLES ------------------------------------------------------------				// - CONSTRUCTOR -----------------------------------------------------------------				public function M4Tween( target:Object, duration:Number, params:Object = null, delay:Number = 0 )		{			_target = target;			_duration = duration * 1000;			_delay = delay * 1000;						if( params.ease && typeof( params.ease ) == "function" )			{				_ease = params.ease;				delete params.ease;			}			else _ease = Linear.easeIn;						for( var name:String in params )				_properties = new TweenProperty( name, params[ name ], _properties );		}				// - EVENTS HANDLERS -------------------------------------------------------------				// - PRIVATE METHODS -------------------------------------------------------------				// - PUBLIC METHODS --------------------------------------------------------------				public function start():M4Tween		{			_startTime = getTimer() + _delay;			_endTime = _startTime + _duration;						var property:TweenProperty = _properties;			while( property )			{				property.init( _target );				property = property.next;			}						registerTween( this );						if( _startHandler != null )				_startHandler.apply( null, _startArgs );								return this;		}				public function onStart( handler:Function, ...args ):M4Tween		{			_startHandler = handler;			_startArgs = args;			return this;		}				public function onUpdate( handler:Function, ...args ):M4Tween		{			_updateHandler = handler;			_updateArgs = args;			return this;		}				public function onComplete( handler:Function, ...args ):M4Tween		{			_completeHandler = handler;			_completeArgs = args;			return this;		}				public function dispose():void		{			_prev = null;			_next = null;						if( _properties ) 			{				_properties.dispose();				_properties = null;			}						_startArgs = null;			_startHandler = null;			_updateArgs = null;			_updateHandler = null;			_completeArgs = null;			_completeHandler = null;		}				// - GETTERS & SETTERS -----------------------------------------------------------		}	}final class TweenProperty{	public var name:String;	public var endValue:Number;	public var next:TweenProperty;		public var startValue:Number;	public var delta:Number;		function TweenProperty( name:String, endValue:Number, next:TweenProperty )	{		this.name = name;		this.endValue = endValue;		this.next = next;	}		public function init( target:Object ):void	{		startValue = target[ name ];		delta = endValue - startValue;	}		public function dispose():void	{		if( next ) next.dispose();		next = null;	}}