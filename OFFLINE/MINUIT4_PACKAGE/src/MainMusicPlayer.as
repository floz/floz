/*** Written by :* @author Floz* www.floz.fr || www.minuit4.fr*/package {	import fr.minuit4.tools.musicPlayer.MusicPlayer;	import fr.minuit4.tools.musicPlayer.views.Device;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	public class MainMusicPlayer extends Sprite	{			// - PRIVATE VARIABLES -----------------------------------------------------------				private var _mPlayer:MusicPlayer;		private var _request:URLRequest;				// - PUBLIC VARIABLES ------------------------------------------------------------				public static var multiSong:Boolean = false;				// - CONSTRUCTOR -----------------------------------------------------------------				public function MainMusicPlayer()		{			stage.scaleMode = StageScaleMode.NO_SCALE;            stage.align = StageAlign.TOP_LEFT;                        _request = new URLRequest( path_xml + playlist_name + ".xml" );           	var urlLoader:URLLoader = new URLLoader();           	urlLoader.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );			urlLoader.addEventListener( Event.COMPLETE, loadPlaylistCompleteHandler );			urlLoader.load( _request );                        stage.addEventListener( Event.RESIZE, onResize );						}		// - EVENTS HANDLERS -------------------------------------------------------------				private function ioErrorHandler(event:IOErrorEvent):void		{			trace( "Url de xml erronée : " + _request.url );		}				private function loadPlaylistCompleteHandler(event:Event):void		{			var urlLoader:URLLoader = URLLoader( event.currentTarget );			var xml:XML = XML( urlLoader.data );						multiSong = Boolean( xml.children().( localName() == "song" ).length() > 1 );						var device:Device = new Device();                                      _mPlayer = new MusicPlayer( device );            _mPlayer.x = stage.stageWidth * .5 - _mPlayer.width * .5;            _mPlayer.y = stage.stageHeight * .5 - _mPlayer.height * .5;            addChild( _mPlayer );						var pathMP3:String = xml.path_mp3.toString();			var a:Array = [];			for each( var x:XML in xml.song )			{				_mPlayer.addSong( { url: pathMP3 + x.name,									artist: x.artist, 									title: x.title, 									duration: x.duration } );			}		}				private function onResize(event:Event):void		{			_mPlayer.x = stage.stageWidth * .5 - _mPlayer.width * .5;            _mPlayer.y = stage.stageHeight * .5 - _mPlayer.height * .5;		}				// - PRIVATE METHODS -------------------------------------------------------------				// - PUBLIC METHODS --------------------------------------------------------------				// - GETTERS & SETTERS -----------------------------------------------------------				 public function get path_xml():String { return loaderInfo.parameters[ "path_xml" ] || "xml/"; }		 public function get playlist_name():String { return loaderInfo.parameters[ "playlist_name" ] || "playlist"; }	}	}